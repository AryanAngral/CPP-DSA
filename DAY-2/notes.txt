1. Types if Programming :
    i Objecct Oriented Programming
    ii Functional Programming
    iii Procedural Programming
    iv Declarative Programming
2. Object Oriented Programming :
    i Class
    ii Object
    iii Inheritance
    iv Polymorphism
    v Encapsulation
3. Functional Programming :
    i First Class Functions
    ii Higher Order Functions
    iii Pure Functions
    iv Immutability
4. Procedural Programming :
    i Sequence of Statements
    ii Functions
    iii Variables   
5. Declarative Programming :
    i Focus on What to Solve    
    ii Abstracts Control Flow
6. Key Concepts in Programming :
    i Variables
    ii Data Types
    iii Control Structures
    iv Functions
    v Error Handling




Types of pointers in Cpp:
1. Null Pointer: A pointer that does not point to any valid memory location.
2. Void Pointer: A pointer that can point to any data type but cannot be dereferenced without casting.
3. Wild Pointer: A pointer that points to a random memory location, often uninitialized.
4. Dangling Pointer: A pointer that points to a memory location that has been freed or deleted.
5. Smart Pointer: A pointer that manages the memory automatically, such as `std::unique_ptr` and `std::shared_ptr` in C++.
6. Function Pointer: A pointer that points to a function instead of a data variable.
// 7. Pointer to Pointer: A pointer that points to another pointer, allowing for multi-level indirection.
8. Constant Pointer: A pointer whose address cannot be changed after initialization, but the value it points to can be modified.
9. Pointer to Constant: A pointer that points to a constant value, meaning the value cannot be changed through the pointer.
10. Reference Pointer: A pointer that acts as an alias for another variable, allowing indirect access to the variable's value.
11. Array Pointer: A pointer that points to the first element of an array, allowing access to the entire array.
12. Member Function Pointer: A pointer that points to a member function of a class, allowing access to class methods.
13. Pointer to Member: A pointer that points to a member variable of a class, allowing access to class attributes.



Variables in C++:
Intro: Variables are same as containers that store data in memory. They are used to hold values that can be modified during program execution.
1. Local Variables: Variables declared within a function or block, accessible only within that scope.
2. Global Variables: Variables declared outside of all functions, accessible from any function within the same file or other files if declared extern.
3. Static Variables: Variables declared with the static keyword, retaining their value between function calls and initialized only once.
4. Register Variables: Variables stored in CPU registers for faster access, declared with the register keyword.
5. Constant Variables: Variables declared with the const keyword, whose value cannot be changed after initialization.
6. Volatile Variables: Variables declared with the volatile keyword, indicating that their value may change unexpectedly, often used in hardware programming.
7. Mutable Variables: Variables declared with the mutable keyword, allowing modification of class member variables even in const member functions.
8. Reference Variables: Variables that act as aliases for other variables, allowing indirect access to the original variable's value.   



Pointers in C++:
Intro: Pointers are variables that store memory addresses of other variables. They allow for dynamic memory management and efficient data manipulation.
1. Pointer Declaration: Syntax to declare a pointer variable, e.g., `int* ptr;` for an integer pointer. 
2. Pointer Initialization: Assigning a memory address to a pointer, e.g., `ptr = &variable;` where `&` is the address-of operator.
3. Pointer Dereferencing: Accessing the value stored at the memory address pointed to by a pointer, e.g., `*ptr;` where `*` is the dereference operator.
4. Pointer Arithmetic: Performing arithmetic operations on pointers, such as incrementing or decrementing to access adjacent memory locations.
5. Dynamic Memory Allocation: Using `new` and `delete` operators to allocate and deallocate memory dynamically, e.g., `int* arr = new int[10];` and `delete[] arr;`.
6. Pointer to Pointer: A pointer that points to another pointer, allowing for multi-level indirection, e.g., `int** ptrToPtr;`.
7. Function Pointers: Pointers that point to functions, allowing for dynamic function calls, e.g., `void (*funcPtr)() = &functionName;`.
8. Smart Pointers: C++ standard library provides smart pointers like `std::unique_ptr` and `std::shared_ptr` for automatic memory management, reducing memory leaks.
9. Pointer to Member: A pointer that points to a member variable or function of a class, allowing access to class attributes and methods, e.g., `int ClassName::*ptrToMember;`.
10. Array of Pointers: An array where each element is a pointer, allowing for dynamic arrays of pointers to different data types, e.g., `int* arr[10];`.
11. Constant Pointer: A pointer whose address cannot be changed after initialization, e.g., `int* const ptr = &variable;`.


Reference [&] in C++:
Intro: References are aliases for existing variables, allowing indirect access to their values without using pointers. They provide a safer and more convenient way to work with variables.
 or we can say It return the address of given variable.

De-Reference [ * ] in C++:
Intro: Dereferencing is the process of accessing the value stored at the memory address pointed to by a pointer. It allows manipulation of the value directly through the pointer.
 or we can say It return the value of given variable/address.

Types of Pointers in C++:
1. Null Pointer: A pointer that does not point to any valid memory location, often initialized to `nullptr` or `NULL`.
    - it is good practice to initialize pointers to `nullptr` to avoid wild pointers.
    - Example: `int* ptr = nullptr;`

2. Void Pointer: A pointer that can point to any data type but cannot be dereferenced without casting to a specific type, e.g., `void* ptr;`.
    - or we can say A pointer defined using void keyword, which can hold the address of any data type.
    - Example: `void* ptr; // Pointer to any data type`
    - Example: `void* ptr_name = NULL;
    - It is also called a generic pointer because it can point to any data type.
    - Example: `int a = 10; void* ptr = &a; // Pointer to an integer`
    - Example: `float b = 5.5; ptr = &b; // Pointer to a float`
    - Example: `char c = 'A'; ptr = &c; // Pointer to  a char`
    -it is often used in generic programming or when the type is not known at compile time.

3. Wild Pointer: A pointer that points to a random memory location, often uninitialized, leading to undefined behavior.
    - Example: `int* ptr; // Wild pointer, not initialized`
    - It is important to always initialize pointers before use to avoid wild pointers.

4. Dangling Pointer: A pointer that points to a memory location that has been freed or deleted, leading to potential access violations.
    - Pointer which indicate memory which is dealocated or freed.
    - Example: `int* ptr = new int(10); delete ptr; // Dangling pointer`
    - After deleting the pointer, it should be set to `nullptr` to avoid dangling pointers.
    - Example: `ptr = nullptr; // Avoid dangling pointer`

5. Constant Pointer: A pointer whose address cannot be changed after initialization, but the value it points to can be modified.
    - Example: `const int* ptr = &variable; // Pointer to an integer, address cannot change`
    - The pointer itself cannot be reassigned to point to another variable.

Pointer of Pointer :
    It is also known as double pointer, use to store the address of another pointer.
    - Syntax: 
        `datatype** ptr = & another_pointer_name; // Pointer to a pointer`
    - Example:
         `int** ptr = &another_pointer; // Pointer to an integer pointer`

Pointer to function :
    It is used to store the address of a function, allowing dynamic function calls.
    - Syntax: 
        `return_type (*ptr)(parameter_types) = &function_name;`
    - Example:
        `void (*funcPtr)() = &myFunction; // Pointer to a function with no parameters`

    - Pointer which indicates which indicates address of a function.
    
Array :
    - It is a data type whic stores a series of data of same type in a sequestial manner.
    - Synatax : data_type variable_name[array_size] = {element's of array sepereated by ','};.
    - Example : int arr[5]={1,2,3,4,5}; 
